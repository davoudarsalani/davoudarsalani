name: Update README

on:
  workflow_dispatch:
  schedule:
    - cron: '0 * * * *'  ## every hour

jobs:
  update-readme:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2

      - name: Getting membership info
        shell: bash
        run: |
          user_info="$(curl -s https://api.github.com/users/${{ github.repository_owner }})"

          ## JUMP_2 save a multi-line variable into $GITHUB_ENV:
          echo 'user_info<<EOF' >> $GITHUB_ENV
          echo "$user_info" >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV

      - name: Parsing membership info
        shell: bash
        run: |
          wget -q https://raw.githubusercontent.com/${{ github.repository_owner }}/scripts/master/gb
          wget -q https://raw.githubusercontent.com/${{ github.repository_owner }}/scripts/master/gb-calculation

          ## NOTE insert \nbyte_size=1024 after line one (i.e. below shebang).
          ##      this is necessary because byte_size is an environment variable
          ##      which is not present in GitHub so we have to manually define it in the script here
          sed -i '1a\\nbyte_size=1024' ./gb-calculation && sleep 1

          source ./gb

          # followers="$(printf '%s\n' "$user_info" | jq -rM .'followers')"
          # following="$(printf '%s\n' "$user_info" | jq -rM .'following')"
          # website="$(printf '%s\n' "$user_info" | jq -rM .'blog')"
          # gists="$(printf '%s\n' "$user_info" | jq -rM .'public_gists')"
          public_repos="$(printf '%s\n' "$user_info" | jq -rM .'public_repos')"  ## 10
          created="$(printf '%s\n' "$user_info" | jq -rM .'created_at')"  ## 2019-05-03T07:07:11Z
          # created="$(convert_to_second "$created")"  ## 1556867231

          membership_start="$(relative_date "$created")"

          echo "now=$now" >> $GITHUB_ENV
          echo "public_repos=$public_repos" >> $GITHUB_ENV
          echo "membership_start=$membership_start" >> $GITHUB_ENV

      - name: Inserting membership info
        shell: bash
        run: |
          : > README.md
          {
              printf "<div align=\"center\">\n"

              ## membership badge (currently disabled. The info is shown as custom_title in activity graph in JUMP_3)
              # printf "<img alt=\"membership-message\" src=\"https://img.shields.io/badge/Joined%%20${membership_start// /%%20}-grey\"> "  ## NOTE JUMP_1 exceptionally used %% here

              ## status badge
              printf "<a href=\"https://github.com/${{ github.repository }}/actions/workflows/update-readme.yml\">\n"
              printf "<img alt=\"update-readme\" src=\"https://github.com/${{ github.repository }}/actions/workflows/update-readme.yml/badge.svg\">\n"
              printf "</a>\n"

              printf "</div>\n"
          } >> README.md

      - name: Inserting activity graph, etc.
        shell: bash
        run: |
          {
              printf "<div align=\"center\">\n"

              ## JUMP_3
              ## activity graph (options: &custom_title=${{ github.repository_owner }}%%20activity%%20graph)
              ## (github repo: https://github.com/Ashutosh00710/github-readme-activity-graph)
              printf "<img alt=\"activity-graph\" src=\"https://activity-graph.herokuapp.com/graph?username=${{ github.repository_owner }}&custom_title=Joined%%20${membership_start// /%%20}&hide_border=true&bg_color=00000000&point=00000000&color=1793D1&line=00000000&area=true&area_color=1793d1\">"    ## NOTE JUMP_1 exceptionally used %% here

              ## top langs
              # printf "<img alt=\"top-langs\" src=\"https://github-readme-stats.vercel.app/api/top-langs/?username=${{ github.repository_owner }}&layout=compact&show_icons=true&theme=dark\">"

              ## github stats (options: &hide=stars,commits,prs,issues,contribs&count_private=true)
              # printf "<img alt=\"github-stats\" src=\"https://github-readme-stats.vercel.app/api?username=${{ github.repository_owner }}&hide=stars,prs&show_icons=true&theme=dark\">"

              # printf '\n'
              printf "</div>\n"
              printf '<br>\n\n'
          } >> README.md

      - name: Getting repos info
        shell: bash
        run: |
          repos_info="$(curl -s 'https://api.github.com/users/${{ github.repository_owner }}/repos?type=owner')"

          ## JUMP_2 save a multi-line variable into $GITHUB_ENV:
          echo 'repos_info<<EOF' >> $GITHUB_ENV
          echo "$repos_info" >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV

      - name: Parsing/inserting repos info
        shell: bash
        run: |
          source ./gb
          source ./gb-calculation

          for ((index=0; index<"$public_repos"; index++)); {
            name="$(printf '%s\n' "$repos_info" | jq -rM ."[${index}]|(.name)")"
            url="$(printf '%s\n' "$repos_info" | jq -rM ."[${index}]|(.html_url)")"
            forked="$(printf '%s\n' "$repos_info" | jq -rM ."[${index}]|(.fork)")"
            if [ "$forked" == 'true' ]; then
              forked_repo_info="$(curl -s https://api.github.com/repos/${{ github.repository_owner }}/"$name")"

              parent_url="$(printf '%s\n' "$forked_repo_info" | jq -rM .'parent|(.html_url)')"
              parent_name="$(printf '%s\n' "$forked_repo_info" | jq -rM .'parent|(.name)')"
              parent_owner="$(printf '%s\n' "$forked_repo_info" | jq -rM .'parent|(.owner.login)')"
              {
                printf '* [%s](%s)\n' "$name" "$url"
                printf '\t+ __forked from:__ [%s](%s) by %s\n' "$parent_name" "$parent_url" "$parent_owner"
              } >> README.md
            elif [ "$forked" == 'false' ]; then
              topics_str=''
              lang_percent_bar_arr=()
              declare -A top_langs_arr
              declare -i bytes_total

              size="$(printf '%s\n' "$repos_info" | jq -rM ."[${index}]|(.size)")"
              (( size == 0 )) && size=1
              (( size*=1024 ))  ## convert to bytes first
              size="$(convert_byte "$size")"

              zip_url="https://api.github.com/repos/${{ github.repository_owner }}/${name}/zipball"

              ## https://gist.github.com/0penBrain/7be59a48aba778c955d992aa69e524c5
              commits_count="$(curl -s -I -k "https://api.github.com/repos/${{ github.repository_owner }}/${name}/commits?per_page=1" | \
                               sed -n '/^[Ll]ink:/ s/.*"next".*page=\([0-9]*\).*"last".*/\1/p')"

              readarray -t topics_arr < <(printf '%s\n' "$repos_info" | jq -rM ."[${index}]|(.topics[])" | sort)
              for topic in "${topics_arr[@]}"; {
                topic="${topic,,}"
                topics_str+="[${topic}](https://github.com/topics/${topic// /%20}), "
              }

              description="$(printf '%s\n' "$repos_info" | jq -rM ."[${index}]|(.description)")"

              created_at="$(printf '%s\n' "$repos_info" | jq -rM ."[${index}]|(.created_at)")"
              created_at="$(relative_date "$created_at" "$now")"

              # updated_at="$(printf '%s\n' "$repos_info" | jq -rM ."[${index}]|(.updated_at)")"
              # updated_at="$(relative_date "$updated_at" "$now")"

              pushed_at="$(printf '%s\n' "$repos_info" | jq -rM ."[${index}]|(.pushed_at)")"
              pushed_at="$(relative_date "$pushed_at" "$now")"

              ## top langs START
              sleep 3
              top_langs_info="$(curl -s https://api.github.com/repos/${{ github.repository_owner }}/${name}/languages)"

              ## turn json into associative array (https://stackoverflow.com/questions/58999047/how-to-construct-associative-bash-array-from-json-hash)
              lang_index=1
              while IFS= read -r -d '' key && IFS= read -r -d '' value; do
                ((lang_index > 5)) && break
                top_langs_arr[${key}]="$value"
                ((lang_index++))
              done < <(jq -j 'to_entries[] | (.key, "\u0000", .value, "\u0000")' <<< "$top_langs_info")

              ## get bytes_total
              bytes_total=$(IFS=+; echo "$((${top_langs_arr[*]}))")  ## NOTE do NOT replace * with @

              ## TODO make top_langs_arr sorted (by second column)
              for top_langs_key in "${!top_langs_arr[@]}"; {
                top_langs_value="${top_langs_arr[${top_langs_key}]}"
                top_langs_percent="$(float_pad "${top_langs_value}*100/${bytes_total}" 1 2)"
                is_not_zero="$(compare_floats "$top_langs_percent" ">" 0)"
                [ "$is_not_zero" == 'true' ] && {
                  top_langs_key="${top_langs_key,,}"

                  top_langs_percent_qrtr="$(( ${top_langs_percent%.*} / 5 ))"
                  top_langs_percent_qrtr="${top_langs_percent_qrtr%.*}"
                  (( top_langs_percent_qrtr == 0 )) && top_langs_percent_qrtr=1  ## to make sure it has at least one block
                  short="$((20 - "$top_langs_percent_qrtr" ))"
                  full="$(printf "%${top_langs_percent_qrtr}s" | sed 's/ /█/g')"  ## █ ░
                  empty="$(printf "%${short}s" | sed 's/ /░/g')"
                  perc_lang="$(printf ' %s [%s](https://github.com/topics/%s)\n' "${top_langs_percent%.00}%" "$top_langs_key" "${top_langs_key// /%20}")"
                  lang_percent_bar_arr+=( "\`${full}${empty}\` ${perc_lang}")
                }
              }
              ## top langs END

              {
                printf '* [%s](%s) `%s` `%s commits` [](%s)\n' "$name" "$url" "$size" "$commits_count" "$zip_url"
                [ "$topics_str" ] && printf '\t+ __topics:__ %s\n' "${topics_str%,*}"
                [ "$description" == 'null' ] || printf '\t+ __desc:__ %s\n' "$description"
                printf '\t+ __created:__ %s\n' "$created_at"
                printf '\t+ __last pushed:__ %s\n' "$pushed_at"
                [ "$lang_percent_bar_arr" ] && printf '\t+ %s\n' "${lang_percent_bar_arr[@]}"
              } >> README.md

              unset topics_str bytes_total
              unset 'topics_arr[@]' 'lang_percent_bar_arr[@]' 'top_langs_arr[@]'
            fi
          }

      - name: Inserting top badge
        shell: bash
        run: |
          {
            printf "<div align=\"center\">\n"

            printf "<a href='https://github.com/${{ github.repository }}#readme'>\n"
            printf "<img alt='top' src='https://img.shields.io/badge/TOP-grey'>\n"
            printf '</a>\n'

            printf "</div>\n"
          } >> README.md

      - name: Pushing changes
        uses: davoudarsalani/action-push@master
        with:
          file_pattern: 'README.md'
